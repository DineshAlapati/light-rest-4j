<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Rest 4J</title>
    <link>https://networknt.github.io/light-rest-4j/</link>
    <description>Recent content on Light Rest 4J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 15 Aug 2017 21:56:32 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-rest-4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to build petstore API from specification</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/petstore/</link>
      <pubDate>Tue, 15 Aug 2017 21:56:32 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/petstore/</guid>
      <description>The petstore RESTful API is used by a lot of frameworks as reference application and in this tutorial, we will walk you through the step to get petstore generated and then deployed to production. Within these steps, we will show you how to use the features of light-4j and light-rest-4j frameworks.
Please note that our frameworks are aiming microservices and there are several tutorial to show case multiple services interact with each other.</description>
    </item>
    
    <item>
      <title>Road Map</title>
      <link>https://networknt.github.io/light-rest-4j/roadmap/</link>
      <pubDate>Thu, 10 Aug 2017 09:43:18 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/roadmap/</guid>
      <description> We are closely monitoring OpenAPI 3.0 development and will support it once the tool chain is stable.  </description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://networknt.github.io/light-rest-4j/example/</link>
      <pubDate>Thu, 10 Aug 2017 09:42:59 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/example/</guid>
      <description>As light-rest-4j is the first framework supported, we have more Restful examples than any other style of microserivces. All rest examples can be found at https://github.com/networknt/light-example-4j/tree/master/rest
Most example applications consist multiple services and only petstore is a single service which is described in getting started
The rest of examples are used in tutorials and you can follow them step by step into the details.</description>
    </item>
    
    <item>
      <title>Benchmark</title>
      <link>https://networknt.github.io/light-rest-4j/benchmark/</link>
      <pubDate>Thu, 10 Aug 2017 09:42:38 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/benchmark/</guid>
      <description>One of the major goals to design light-*-4j frameworks is to provide a Java EE alternative with lower latency, higher throughput and smaller memory footprint.
We basically achieved this goal and beyond. Internally, we maintain a microservices benchmark with all the popular microservices frameworks.
There are third party test from TechEmpower from Round 14 with a version that is not even optimized. Note that it is called light-java in that benchmark and later we have changed name to light-4j.</description>
    </item>
    
    <item>
      <title>DevOps</title>
      <link>https://networknt.github.io/light-rest-4j/devops/</link>
      <pubDate>Thu, 10 Aug 2017 09:42:20 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/devops/</guid>
      <description>This document will include specific DevOps flows for light-rest-4j and everything in common can be found at light-4j DevOps section</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>https://networknt.github.io/light-rest-4j/design/</link>
      <pubDate>Thu, 10 Aug 2017 09:41:55 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/design/</guid>
      <description>This section will include any specific design consideration for Restful APIs and the general design can be found at https://networknt.github.io/light-4j/design/</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://networknt.github.io/light-rest-4j/architecture/</link>
      <pubDate>Thu, 10 Aug 2017 09:41:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/architecture/</guid>
      <description>This section will include any specific architecture consideration for Restful APIs and the general architecture for light-*-4j frameworks can be found at https://networknt.github.io/light-4j/architecture/</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://networknt.github.io/light-rest-4j/getting-started/</link>
      <pubDate>Thu, 10 Aug 2017 09:41:21 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/getting-started/</guid>
      <description>To start a microservice with light-rest-4j, the easier way is to use light-codegen to scaffold a running application based on your OpenAPI specification and a config.json that controls how code generator works.
The other way to start your project if you don&amp;rsquo;t want to follow design driven approach is to copy one of our examples and extend it based on your use cases.
Start project with light-codegen light-*-4j frameworks encourage design driven approach to build your services which means you have to create your contract before start coding.</description>
    </item>
    
    <item>
      <title>Branch Pattern Microservices</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/ms-branch/</link>
      <pubDate>Wed, 12 Jul 2017 16:37:05 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/ms-branch/</guid>
      <description>This is another pattern that is very useful which is a hybrid of chain pattern and aggregate pattern.
This tutorial shows you how to build 4 services in branch pattern.
 API A -&amp;gt; API B -&amp;gt; API D -&amp;gt; API C  API A calls API B and API C. API B calls API D.
Prepare workspace All specifications and code of the services are on github.com but we are going to redo it again by following the steps in the tutorial.</description>
    </item>
    
    <item>
      <title>Aggregate Pattern Microservices</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/ms_aggregate/</link>
      <pubDate>Fri, 16 Jun 2017 22:45:02 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/ms_aggregate/</guid>
      <description>This is another pattern that is very useful for serving mobile native applications. The mobile app just send one request to the aggregate API and it will call multiple APIs to gether info and send back to the consumer. This avoid mobile device to call multiple APIs to get data on a slow network.
This tutorial shows you how to build 4 services with one of them the aggregator. And it will be the foundation for our microserives benchmarks.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://networknt.github.io/light-rest-4j/tool/</link>
      <pubDate>Wed, 07 Jun 2017 19:48:38 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tool/</guid>
      <description>There are so many tools that help us to build restful microservices and here is a small list.
 Swagger Editor is used to create and update swagger specifications.
 Swagger CLI to validate, merge and convert swagger specification files.
  </description>
    </item>
    
    <item>
      <title>Other Components</title>
      <link>https://networknt.github.io/light-rest-4j/other/</link>
      <pubDate>Wed, 07 Jun 2017 19:10:31 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/other/</guid>
      <description>This section lists all other components that are not middleware handlers for light-rest-4j framework.
Currently, there is no other components but something might be added later on.</description>
    </item>
    
    <item>
      <title>Middleware Handlers</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/</link>
      <pubDate>Wed, 07 Jun 2017 19:03:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/</guid>
      <description>The light-rest-4j framework has the following middleware handlers designed around OpenAPI specification (previously named swagger specification).
 swagger-meta is a middleware that load swagger at runtime and parse it based on the request uri and method. The result map is attached to the exchange for subsequent handlers to use.
 swagger-security Oauth2 JWT token verification distributed in every microservice. Also, there is an OAuth2 server based on light-4j released here</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/</link>
      <pubDate>Wed, 07 Jun 2017 15:07:41 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/</guid>
      <description>The following tutorials are leveraging light-rest-4j framework and they will help users to get started.
 How to build petstore API from specification
 How to implement Chain Pattern of microservices
 How to implement Aggregate Pattern of microservices
 How to implement Branch Pattern of Microservices
 How to access database in microservices
 How to register and discover services
  </description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-rest-4j/</link>
      <pubDate>Tue, 06 Jun 2017 09:37:52 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/</guid>
      <description>Light-Java provide a plugin architecture and dozens of middleware handlers to address cross-cutting concerns in general. When you decide to build an API or service, you have to choose from different styles and corresponding framework to get started.
For API categories and frameworks, please find details here
Chances are you are building a public Web API and want to follow RESTful style to make sure everyone can understand and consume it.</description>
    </item>
    
    <item>
      <title>Registry and Discovery</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/discovery/</link>
      <pubDate>Fri, 27 Jan 2017 20:57:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/discovery/</guid>
      <description>Introduction This is a tutorial to show you how to use service registry and discovery for microservices. The example services are implemented in RESTful style but they can be implemented in graphql or hybrid as well. We are going to use api_a, api_b, api_c and api_d as our examples. To simply the tutorial, I am going to disable the security all the time. There are some details that might not be shown in this tutorial, for example, walking through light-codegen config files etc.</description>
    </item>
    
    <item>
      <title>Restful Database Access Tutorial</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/database/</link>
      <pubDate>Mon, 23 Jan 2017 09:07:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/database/</guid>
      <description>Introduction Most microservices will have to access database in order to fulfill consumer requests. In this tutorial, we will walk through the following steps with Oracle/Postgres/Mysql for light-rest-4j framework. If you use light-graphql-4j or light-hybrid-4j the steps will be somewhat different but the concept is the same.
 How to setup database connection pool How to connect to the database instance How to do query database tables How to update database tables  Preparation In order to follow the steps below, please make sure you have the same working environment.</description>
    </item>
    
    <item>
      <title>Swagger Validator</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/swagger-validator/</link>
      <pubDate>Wed, 12 Oct 2016 19:13:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/swagger-validator/</guid>
      <description>This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It encourages design driven implementation so swagger specification should be done before the implementation starts. With the light-codegen light-4j generator, the server stub can be generated and start running within minutes. However, we cannot rely on generator for validation as specification will be changed along the life cycle of the API.</description>
    </item>
    
    <item>
      <title>Swagger Meta</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/swagger-meta/</link>
      <pubDate>Wed, 12 Oct 2016 19:10:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/swagger-meta/</guid>
      <description>Introduction This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It is designed based on swagger specification so it is our best interest to utilize the swagger.json to its full potential. Currently there are two components are using the swagger specification during runtime.
 swagger-security - Verify scope in the JWT token against scope defined in swagger specification if scope verification is true.</description>
    </item>
    
    <item>
      <title>Swagger Security</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/swagger-security/</link>
      <pubDate>Wed, 12 Oct 2016 19:07:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/swagger-security/</guid>
      <description>This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It supports OAuth2 with JWT token distributed verification and can be extended to other authentication and authorization approaches.
JwtVerifyHandler This is the handler that is injected during server start up if security.json enableVerifyJwt is true. It does further scope verification if enableVerifyScope is true against swagger specification.
Distributed JWT verification Unlike simple web token, the resource server has to contact Authorization server to validate the bearer token.</description>
    </item>
    
    <item>
      <title>Chain Pattern Microservices</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/ms-chain/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/ms-chain/</guid>
      <description>Introduction These days light weight container like Docker is getting traction, more and more API services are developed for docker container and deployed to the cloud. In this environment, traditional heavy weight containers like Java EE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light weight docker container. Docker and container orchestration tools like Kubernetes and Docker Swarm are replacing all the functionalities Java EE provides without hogging resources.</description>
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/microservices/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/microservices/</guid>
      <description>Introduction These days light weight container like Docker is getting traction, more and more API services are developed for docker container and deployed to the cloud. In this environment, traditional heavy weight containers like Java EE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light weight docker container. Docker and container orchestration tools like Kubernetes and Docker Swarm are replacing all the functionalities Java EE provides without hogging resources.</description>
    </item>
    
    <item>
      <title>Swagger cli to bundle and validate specification files</title>
      <link>https://networknt.github.io/light-rest-4j/tool/swagger-cli/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tool/swagger-cli/</guid>
      <description>Note: that you don&amp;rsquo;t need this tool if your specification file is self contained yaml file in swagger-editor. You can export into json format and it is validated already during the export process.
Introduction When editing swagger specification file, naturally we will be using yaml format as it is very easy to read and manipulate. Also, we might extract common definitions into separate files so that there is no duplications for multiple APIs.</description>
    </item>
    
    <item>
      <title>Swagger Editor for OpenAPI Specification</title>
      <link>https://networknt.github.io/light-rest-4j/tool/swagger-editor/</link>
      <pubDate>Sat, 08 Oct 2016 22:14:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tool/swagger-editor/</guid>
      <description>Introduction Swagger is a simple yet powerful representation of your RESTful API. With the largest ecosystem of API tooling on the planet, thousands of developers are supporting Swagger in almost every modern programming language and deployment environment. With a Swagger-enabled API, you get interactive documentation, client SDK generation and discoverability.
Swagger was created to help fulfill the promise of APIs and is 100% open source software.
The Swagger specification defines a set of files required to describe an API.</description>
    </item>
    
  </channel>
</rss>