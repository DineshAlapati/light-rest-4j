<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Light Rest 4J</title>
    <link>https://networknt.github.io/light-rest-4j/</link>
    <description>Recent content on Light Rest 4J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 07 Jun 2017 19:10:31 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-rest-4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Other Components</title>
      <link>https://networknt.github.io/light-rest-4j/other/</link>
      <pubDate>Wed, 07 Jun 2017 19:10:31 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/other/</guid>
      <description>This section lists all other components that are not middleware handlers for light-rest-4j framework.
Currently, there is no other components but something might be added later on.</description>
    </item>
    
    <item>
      <title>Middleware Handlers</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/</link>
      <pubDate>Wed, 07 Jun 2017 19:03:07 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/</guid>
      <description>The light-rest-4j framework has the following middleware handlers designed around OpenAPI specification (previously named swagger specification).
 swagger-meta is a middleware that load swagger at runtime and parse it based on the request uri and method. The result map is attached to the exchange for subsequent handlers to use.
 swagger-security Oauth2 JWT token verification distributed in every microservice. Also, there is an OAuth2 server based on light-4j released here</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/</link>
      <pubDate>Wed, 07 Jun 2017 15:07:41 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/</guid>
      <description>The following tutorials are leveraging light-rest-4j framework and they will help users to get started.
 How to build, test and deploy microserivces
 How to access database in microservices
 How to register and discover services
 How to implement Chain Pattern of microservices
  </description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://networknt.github.io/light-rest-4j/</link>
      <pubDate>Tue, 06 Jun 2017 09:37:52 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/</guid>
      <description>Light-Java provide a plugin architecture and dozens of middleware handlers to address cross-cutting concerns in general. When you decide to build an API or service, you have to choose from different styles and corresponding framework to get started.
For API categories and frameworks, please find details here
Chances are you are building a public Web API and want to follow RESTful style to make sure everyone can understand and consume it.</description>
    </item>
    
    <item>
      <title>Registry and Discovery</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/discovery/</link>
      <pubDate>Fri, 27 Jan 2017 20:57:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/discovery/</guid>
      <description>Introduction This is a tutorial to show you how to use service registry and discovery for microservices. We are going to use api_a, api_b, api_c and api_d as our examples. To simply the tutorial, I am going to disable the security all the time.
The specifications for above APIs can be found at https://github.com/networknt/swagger
Preparation In order to follow the steps below, please make sure you have the same working environment.</description>
    </item>
    
    <item>
      <title>Restful Database Access Tutorial</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/database/</link>
      <pubDate>Mon, 23 Jan 2017 09:07:32 -0500</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/database/</guid>
      <description>Introduction Most microservices will have to access database in order to fulfill consumer requests. In this tutorial, we will walk through the following steps with Oracle/Postgres/Mysql for light-rest-4j framework. If you use light-graphql-4j or light-hybrid-4j the steps will be somewhat different but the concept is the same.
 How to setup database connection pool How to connect to the database instance How to do query database tables How to update database tables  Preparation In order to follow the steps below, please make sure you have the same working environment.</description>
    </item>
    
    <item>
      <title>Swagger Validator</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/swagger-validator/</link>
      <pubDate>Wed, 12 Oct 2016 19:13:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/swagger-validator/</guid>
      <description>This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It encourages design driven implementation so swagger specification should be done before the implementation starts. With the light-codegen light-4j generator, the server stub can be generated and start running within minutes. However, we cannot rely on generator for validation as specification will be changed along the life cycle of the API.</description>
    </item>
    
    <item>
      <title>Swagger Meta</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/swagger-meta/</link>
      <pubDate>Wed, 12 Oct 2016 19:10:34 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/swagger-meta/</guid>
      <description>Introduction This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It is designed based on swagger specification so it is our best interest to utilize the swagger.json to its full potential. Currently there are two components are using the swagger specification during runtime.
 swagger-security - Verify scope in the JWT token against scope defined in swagger specification if scope verification is true.</description>
    </item>
    
    <item>
      <title>Swagger Security</title>
      <link>https://networknt.github.io/light-rest-4j/middleware/swagger-security/</link>
      <pubDate>Wed, 12 Oct 2016 19:07:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/middleware/swagger-security/</guid>
      <description>This handler is part of the light-rest-4j which is built on top of light-4j but focused on RESTful API only.
It supports OAuth2 with JWT token distributed verification and can be extended to other authentication and authorization approaches.
JwtVerifyHandler This is the handler that is injected during server start up if security.json enableVerifyJwt is true. It does further scope verification if enableVerifyScope is true against swagger specification.
Distributed JWT verification Unlike simple web token, the resource server has to contact Authorization server to validate the bearer token.</description>
    </item>
    
    <item>
      <title>Chain Pattern Microservices</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/ms-chain/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/ms-chain/</guid>
      <description>Introduction These days light weight container like Docker is getting traction, more and more API services are developed for docker container and deployed to the cloud. In this environment, traditional heavy weight containers like Java EE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light weight docker container. Docker and container orchestration tools like Kubernetes and Docker Swarm are replacing all the functionalities Java EE provides without hogging resources.</description>
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://networknt.github.io/light-rest-4j/tutorial/microservices/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-rest-4j/tutorial/microservices/</guid>
      <description>Introduction These days light weight container like Docker is getting traction, more and more API services are developed for docker container and deployed to the cloud. In this environment, traditional heavy weight containers like Java EE and Spring are losing ground as it doesn&amp;rsquo;t make sense to have a heavy weight container wrapped with a light weight docker container. Docker and container orchestration tools like Kubernetes and Docker Swarm are replacing all the functionalities Java EE provides without hogging resources.</description>
    </item>
    
  </channel>
</rss>